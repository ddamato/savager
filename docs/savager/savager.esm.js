class e{constructor(){this._registrar={}}get(e){return this._registrar[e]}replace(e){const{url:t,exposure:r,id:n}=this._parseNode(e);if(this.get(n))return Promise.resolve(this._replace(e,n));if("internal"===r){const t=e.getRootNode();if(t.getElementById(n))return Promise.resolve("Reference found in root, replacement halted.");if(e.getRootNode({composed:!0})!==t)return this._embedInternal(e,{id:n})}return"external"===r?this._embedExternal(e,{id:n,url:t}):Promise.reject("Could not find asset reference. Ensure the reference sheet or external url exist before executing this script")}_replace(e,t){const r=this.get(t);if(r){const t=r.cloneNode(!0);return e.parentNode.replaceWith(t),t}}register(e,t,r){return this._registrar[t]=r,this._replace(e,t)}_embedInternal(e,{id:t}){const r=document.getElementById(t);if(r){const n=r.cloneNode(!0);return Promise.resolve(this.register(e,t,this._transformSymbol(n)))}return Promise.reject(`Symbol "${t}" not found in document.`)}_embedExternal(e,{id:t,url:r}){return fetch(r).then(e=>e.text()).then(r=>{const n=(new DOMParser).parseFromString(r,"image/svg+xml").querySelector("symbol");if(n&&1===n.children.length)return this.register(e,t,this._transformSymbol(n));throw new Error("Malformed external reference, please ensure '<symbol/>' assets.")}).catch(e=>console.error(e))}_parseNode(e){const t=e.getAttribute("href"),[r,n]=t.split("#");let s=e.getAttribute("exposure");return s||(s=Boolean(r)?"external":"internal"),{url:t,exposure:s,id:n}}_transformSymbol(e){const t=document.createElementNS("http://www.w3.org/2000/svg","svg");return t.append(e.children),e.hasAttributes()&&[...e.attributes].forEach(({name:e,value:r})=>t.setAttribute(e,r)),t}}const t="window.svgInjectionManager && window.svgInjectionManager.replace(this)",r=()=>{if("undefined"!=typeof window)return window.svgInjectionManager=new e,window.svgInjectionManager};class n{constructor(e,t){this._symbols={},this._options=Object.assign({},t),this.storeSymbols(e)}prepareAssets(e,n){const i={},{externalUrl:a,inject:c,classNames:l,toElement:u}=n||this._options,m={xmlns:"http://www.w3.org/2000/svg"};l&&(m.class=[].concat(l).filter(Boolean).join(" "));let d=e=>e;u&&(d="function"==typeof u?u:o);const g=[].concat(e).reduce((function(e,r){const n=Object.assign({exposure:"internal"},m),o={href:"#"+r};a&&(n.exposure="external",o.href=`${"string"==typeof a?a:""}${r}.svg`+o.href);let i="";c&&(i="<style>@keyframes nodeInserted { to { opacity: 1; } }</style>",o.style="animation: nodeInserted .1ms",o.onanimationstart=t,o.onerror=t);const l=`<svg ${s(n)}>${i}<use ${s(o)}/></svg>`;return Object.assign(e,{[r]:l})}),{}),h=this._symbols;let p=Object.keys(g).reduce((function(e,t){return h&&h[t]?e+h[t].replace(/<\/?svg ?[^>]*>/gim,""):e}),"");if(i.assets=Object.entries(g).reduce((function(e,[t,r]){return Object.assign(e,{[t]:d(r)})}),{}),p&&!a){const{sheet:e}=function(e){const t="savager-"+Math.random().toString(36).substr(2,9);return{sheet:`<svg id="${t}" xmlns="http://www.w3.org/2000/svg" style="display:none;">${e}</svg>`}}(p);i.sheet=d(e)}return c&&(i.inject=r),i}storeSymbols(e){return this._symbols=Object.assign({},this._symbols,e),this}}function s(e){return Object.entries(e).map(([e,t])=>`${e}="${t}"`).join(" ")}function o(e){if("undefined"!=typeof document&&document.createElement){const t=document.createElement("template");return t.innerHTML=e,t.content}return e}async function i(e){if(!e)return{};if("string"==typeof e){if("undefined"!=typeof window||!require)throw new Error("Can only create symbols using path within node environment.");const t=require("path"),r=require("fs");try{const n=await r.promises.readdir(e),s=await Promise.all(n.map(async n=>({[t.parse(n).name]:(await r.promises.readFile(t.resolve(e,n))).toString()})));return i(s.reduce((e,t)=>Object.assign(e,t),{}))}catch(e){throw new Error(e)}}return"object"==typeof e?Object.entries(e).reduce((e,[t,r])=>Object.assign(e,{[t]:a(r,t)}),{}):void 0}function a(e,t){let r='xmlns="http://www.w3.org/2000/svg"';const n=e.replace(/(xmlns=.[^"']+)./gim,e=>(r=e,"")).replace(/(<\/?)svg/gim,"$1symbol").replace(/<symbol/,`<symbol id="${t}"`);return`<svg ${r}>${n}</svg>`.replace(/\r?\n|\r|/g,"").replace(/ {2,}/g," ")}const c=n;export default n;export{c as Savager,i as createSymbols};
