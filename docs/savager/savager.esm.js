const e="window.svgInjectionManager && window.svgInjectionManager.replace(this)";class t{constructor(e,t){this._symbols={},this._options=Object.assign({},t),this.storeSymbols(e)}prepareAssets(t,r){const{externalUrl:o,inject:i,classNames:a,toElement:c}=r||this._options,l={xmlns:"http://www.w3.org/2000/svg"};a&&(l.class=[].concat(a).filter(Boolean).join(" "));let u=e=>e;c&&(u="function"==typeof c?c:n);const g=[].concat(t).reduce((function(t,n){const r=Object.assign({exposure:"internal"},l),a={href:"#"+n};o&&(r.exposure="external",a.href=`${"string"==typeof o?o:""}${n}.svg`+a.href);let c="";i&&(c="<style>@keyframes nodeInserted { to { opacity: 1; } }</style>",a.style="animation: nodeInserted .1ms",a.onanimationstart=e,a.onerror=e);const u=`<svg ${s(r)}>${c}<use ${s(a)}/></svg>`;return Object.assign(t,{[n]:u})}),{}),m=this._symbols;let p=Object.keys(g).reduce((function(e,t){return m&&m[t]?e+m[t].replace(/<\/?svg ?[^>]*>/gim,""):e}),"");const d=Object.entries(g).reduce((e,[t,s])=>Object.assign(e,{[t]:u(s)}),{});if(p&&!o){const{sheet:e}=function(e){const t="savager-"+Math.random().toString(36).substr(2,9);return{sheet:`<svg id="${t}" xmlns="http://www.w3.org/2000/svg" style="display:none;">${e}</svg>`}}(p);return{assets:d,sheet:u(e)}}return{assets:d}}storeSymbols(e){return this._symbols=Object.assign({},this._symbols,e),this}}function s(e){return Object.entries(e).map(([e,t])=>`${e}="${t}"`).join(" ")}function n(e){if("undefined"!=typeof document&&document.createElement){const t=document.createElement("template");return t.innerHTML=e,t.content}return e}async function r(e){if(!e)return{};if("string"==typeof e){if("undefined"!=typeof window||!require)throw new Error("Can only create symbols using path within node environment.");const t=require("path"),s=require("fs");try{const n=await s.promises.readdir(e),o=await Promise.all(n.map(async n=>({[t.parse(n).name]:(await s.promises.readFile(t.resolve(e,n))).toString()})));return r(o.reduce((e,t)=>Object.assign(e,t),{}))}catch(e){throw new Error(e)}}return"object"==typeof e?Object.entries(e).reduce((e,[t,s])=>Object.assign(e,{[t]:o(s,t)}),{}):void 0}function o(e,t){let s='xmlns="http://www.w3.org/2000/svg"';const n=e.replace(/(xmlns=.[^"']+)./gim,e=>(s=e,"")).replace(/(<\/?)svg/gim,"$1symbol").replace(/<symbol/,`<symbol id="${t}"`);return`<svg ${s}>${n}</svg>`.replace(/\r?\n|\r|/g,"").replace(/ {2,}/g," ")}const i=t;export default t;export{i as Savager,r as createSymbols};
