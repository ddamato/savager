const e=function(e){const t=document.getElementById(e);let s=document.getElementById("savager-mastersheet");s||(s=document.createElementNS("http://www.w3.org/2000/svg","svg"),s.id="savager-mastersheet",s.style.display="none",document.body.appendChild(s)),Array.prototype.slice.call(t.querySelectorAll("symbol")).forEach(e=>s.appendChild(e)),t.remove()}.toString(),t="window.svgInjectionManager && window.svgInjectionManager.replace(this)";class s{constructor(e,t){this._symbols={},this._options=Object.assign({},t),this.storeSymbols(e)}prepareAssets(s,r){const{externalUrl:o,consolidate:a,inject:i,classNames:c,toElement:l}=r||this._options,m=c?`class="${[].concat(c).filter(Boolean).join(" ")}"`:"";let p=e=>e;l&&(p="function"==typeof l?l:n);const d=[].concat(s).reduce((function(e,s){const n={href:"#"+s};let r="internal";o&&(n.href=`${"string"==typeof o?o:""}${s}.svg`+n.href,r="external");let a="";i&&(a="<style>@keyframes nodeInserted { to { opacity: 1; } }</style>",n.style="animation: nodeInserted .1ms",n.onanimationstart=t,n.onerror=t);const c=`<svg ${[m,r].filter(Boolean).join(" ")}>${a}<use ${Object.entries(n).map(([e,t])=>`${e}="${t}"`).join(" ")}/></svg>`;return Object.assign(e,{[s]:c})}),{}),g=this._symbols;let u=Object.keys(d).reduce((function(e,t){return g&&g[t]?e+g[t].replace(/<\/?svg ?[^>]*>/gim,""):e}),"");const y=Object.entries(d).reduce((e,[t,s])=>Object.assign(e,{[t]:p(s)}),{});if(u&&!o){const{sheet:t}=function(t,s){const n="savager-"+Math.random().toString(36).substr(2,9),r=`(${e})('${n}')`,o=`<script type="text/javascript">${r}<\/script>`,a=`<svg id="${n}" xmlns="http://www.w3.org/2000/svg" style="display:none;" consolidate="false">${t}${o}</svg>`;return{sheet:!1===s?a.replace(o,""):a.replace('consolidate="false"',""),script:r}}(u,a);return{assets:y,sheet:p(t)}}return{assets:y}}storeSymbols(e){return this._symbols=Object.assign({},this._symbols,e),this}}function n(e){if("undefined"!=typeof document&&document.createElement){const t=document.createElement("template");return t.innerHTML=e,t.content}return e}async function r(e){if(!e)return{};if("string"==typeof e){if("undefined"!=typeof window||!require)throw new Error("Can only create symbols using path within node environment.");const t=require("path"),s=require("fs");try{const n=await s.promises.readdir(e),o=await Promise.all(n.map(async n=>({[t.parse(n).name]:(await s.promises.readFile(t.resolve(e,n))).toString()})));return r(o.reduce((e,t)=>Object.assign(e,t),{}))}catch(e){throw new Error(e)}}return"object"==typeof e?Object.entries(e).reduce((e,[t,s])=>Object.assign(e,{[t]:o(s,t)}),{}):void 0}function o(e,t){let s='xmlns="http://www.w3.org/2000/svg"';const n=e.replace(/(xmlns=.[^"']+)./gim,e=>(s=e,"")).replace(/(<\/?)svg/gim,"$1symbol").replace(/<symbol/,`<symbol id="${t}"`);return`<svg ${s}>${n}</svg>`.replace(/\r?\n|\r|/g,"").replace(/ {2,}/g," ")}const a=s;export default s;export{a as Savager,r as createSymbols};
